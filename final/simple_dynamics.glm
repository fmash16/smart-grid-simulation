//Simple deltamode and frequency-measuring example

//Sets the date format so the player works with how I formatted it
//#set dateformat=US

//Some items used by the simulation - these set an "exit deltamode convergence"
//This is used below
#define rotor_convergence=0.0001

//Deltamode declarations - global values - these have reasonable defaults, this is just to show how to manipulate them
#set deltamode_timestep=100000000		//100 ms
#set deltamode_maximumtime=60000000000	//1 minute
#set deltamode_iteration_limit=10		//Iteration limit

clock {
	timezone "PST+8PDT";				//Moved this first in the clock block, otherwise it causes issues
    timestamp '2010-01-01 00:00:00';
    stoptime '2010-01-01 00:01:00';		//Shortened the run-time, just because I didn't want to wait as long
}

//Module order matters for deltamode, otherwise things update out of sequence
//It will give "slightly wrong" answers, if done that way.
//Also removed superfluous modules from your file
module tape;
module powerflow {
	enable_subsecond_models true;	//Enables deltamode for the powerflow module
	deltamode_timestep 10.0 ms;		//Good timestep value for electromechanical diesels
	solver_method NR;				//NR MUST be used for deltamode, otherwise it won't work
	all_powerflow_delta true;		//Saves having to put "flags DELTAMODE;" on every powerflow object
	default_maximum_voltage_error 1e-9;
}
module generators {
	enable_subsecond_models true;	//Enables deltamode for generator module
	deltamode_timestep 10.0 ms;	//Desired timestep for the generator module models
}

// Create node objects

object node {      
	name node001;		//Modified all object names.  If they start with a number, GridLAB-D requires an override
	bustype SWING;       
	phases ABC;     
	nominal_voltage 2401.7771;     
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
	object recorder {      
		flags DELTAMODE;	//Must explicitly set the recorder to do deltamode
		file NODE_1.csv;
		interval 1;			//Changed to 1, otherwise it won't record anything interesting in deltamode
		limit 100000000000;
		property voltage_A,voltage_B,voltage_C,voltage_AB,voltage_BC,voltage_CA,current_A,current_B,current_C,power_A,power_B,power_C,measured_angle_A,measured_frequency_A,measured_angle_B,measured_frequency_B,measured_angle_C,measured_frequency_C,measured_frequency;
	};    
}  

object node {     
	name node002;     
	phases ABC;    
	nominal_voltage 2401.7771;   
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
	object recorder {                            
		flags DELTAMODE;	//Must explicitly set the recorder to do deltamode
		file NODE_2.csv;
		interval 1;			//Changed to 1, otherwise it won't record anything interesting in deltamode
		limit 100000000000;
		property voltage_A,voltage_B,voltage_C,voltage_AB,voltage_BC,voltage_CA,current_A,current_B,current_C,power_A,power_B,power_C,measured_angle_A,measured_frequency_A,measured_angle_B,measured_frequency_B,measured_angle_C,measured_frequency_C,measured_frequency;
	};    
}

// Generator and load

object diesel_dg {
    name DIESEL_1;
    parent node001;
	flags DELTAMODE;		//Enable deltamode on the model
	Rated_V 4160.0;			//Need to set the Line-to-line rating
	Rated_VA 1.0 MVA;		//Just picked an arbitrary size

    //Gen_type SYNCHRONOUS;			//This value does nothing
	Gen_type DYN_SYNCHRONOUS;		//This is the proper value
	rotor_speed_convergence ${rotor_convergence};	//Define the "exit out of deltamode back to normal mode" criterion
	
    // Gen_mode CONSTANTE;			//This property does nothing
    power_out_A 4000.000000;		//When on the SWING node, these values do nothing (powerflow overrides them for initial conditions)
    power_out_B 4000.000000;		//Just set to a really low value to suppress the warning
    power_out_C 4000.000000;

	Exciter_type SEXS;		//Give it voltage control
	Governor_type DEGOV1;	//Make it try to maintain frequency
	//Recorder for some interesting properties of the generator
	object recorder {
		property rotor_speed,rotor_angle,flux1d,flux2q,EpRotated,VintRotated,Eint_A,Eint_B,Eint_C,Irotated,pwr_electric.real,pwr_electric.imag,pwr_mech;
		flags DELTAMODE;
		interval 1;
		file "Gen_1_values.csv";
	};

}

//Note that you could define this directly as node002 too -- loads are nodes, so you don't have to parent it to node002
object load {
    name LOAD_1;
    parent node002;
    phases ABC;
	frequency_measure_type PLL;	//Have to enable the frequency measurement behavior
    nominal_voltage 2401.7771;  
    constant_power_A 4000.0+3000.0j; 
    constant_power_B 5000.0+2000.0j;
    constant_power_C 4200.0+3500.0j;  
	object recorder {
		flags DELTAMODE;	//Must explicitly set the recorder to do deltamode
		file load.csv;
		interval 1;			//Changed to 1, otherwise it won't record anything interesting in deltamode
		property voltage_A, constant_power_A, constant_current_A, voltage_B, constant_power_B, constant_current_B, voltage_C, constant_power_C, constant_current_C;
	};
	//Add some players, otherwise this doesn't really do anything
	object player {
		flags DELTAMODE;
		property constant_power_A;
		file data_power_A_player.csv;
	};
	object player {
		flags DELTAMODE;
		property constant_power_B;
		file data_power_B_player.csv;
	};
	object player {
		flags DELTAMODE;
		property constant_power_C;
		file data_power_C_player.csv;
	};
}   

// Line definition

object line_spacing {
    name line_spacing_200;
    distance_AB 2.5;
    distance_BC 4.5;
    distance_AC 7.0;
    distance_AN 5.656854;
    distance_BN 4.272002;
    distance_CN 5.0;
}

object overhead_line_conductor {
    name overhead_line_conductor_100;
    geometric_mean_radius .00446;
    resistance 1.12;
}

object line_configuration {
    name line_config_A;
    conductor_A overhead_line_conductor_100;
    conductor_B overhead_line_conductor_100;
    conductor_C overhead_line_conductor_100;
    conductor_N overhead_line_conductor_100;
    spacing line_spacing_200;
}

object overhead_line {
    name line_001_to_002;
    phases ABC;
    from node001;
    to node002;
    length 5280;
    configuration line_config_A;
}